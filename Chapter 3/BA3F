#!/usr/bin/env python3

def rosalindInputToGraph(text):
    
    dictionary = {}
    
    for line in text:
        key, values = line.split(" -> ")
        values = values.split(",")
        dictionary[key] = values
        
    return dictionary


def EulerianCycle(graph):
    
    # starting the cycle with the first node
    cycle = [list(graph.keys())[0]]
    # run until all edges are moved from graph to cycle
    while len(graph) > 0:
        # whenever cycle closes rotate to a node with remaining target nodes
        if cycle[0] == cycle[-1]:
            while not cycle[0] in graph:
                cycle.pop(0)
                cycle.append(cycle[0])
        # the last node of cycle is the new start
        start = cycle[-1]
        # move a target node from graph to the end of cycle
        cycle.append(graph[start].pop())
        # if a key (node) in dict has no more values (target nodes) we can remove it from the dictionary
        if len(graph[start]) == 0: 
            del graph[start]
        
    return cycle


def Output(res):

    out = '->'.join(res)

    print (out)


with open("rosalind_ba3f.txt") as file:
    lines = file.readlines()

for i in range (0,len(lines)):
     lines[i] = lines[i].strip('\n')

graph = rosalindInputToGraph(lines)
res = EulerianCycle(graph)

Output(res)
